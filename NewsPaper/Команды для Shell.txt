python manage.py shell- ДО:)
from news.models import *

1) Создать двух пользователей

us1 = User.objects.create_user('Djon')
us2 = User.objects.create_user('Alina')

2) Создать два объекта модели Author, связанные с пользователями.

au1=Author.objects.create(full_name='Иванов Иван Иванович', user=us1)
au2=Author.objects.create(full_name='Яковлева Алина Ивановна', user=us2)

3) Добавить 4 категории в модель Category.

ca1 = Category.objects.create(name='Спорт')
ca2 = Category.objects.create(name='Политика')
ca3 = Category.objects.create(name='Экономика')
ca4 = Category.objects.create(name='Погода')

4) Добавить 2 статьи и 1 новость.

po1 = Post.objects.create(author=au1, type=news_, header='Погода в Красноярске', content='Тепло +25 солнечно')
po2 = Post.objects.create(author=au2, type=article, header='«Карнаухов зарядил кричалку «Короли седьмой игры»',content='Нападающий московского ЦСКА Михаил Григоренко рассказал о характерной особенности армейцев в минувшем сезоне Кубка Гагарина')
po3 = Post.objects.create(author=au2, type=article, header='Политическая экономика', content='Последнее время политическая экономика не экономична')

5) Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).


post = Post.objects.get(pk=1)
category = Category.objects.get(pk=4)
post.category.add(category)

post = Post.objects.get(pk=2
category = Category.objects.get(pk=1)
post.category.add(category)

post = Post.objects.get(pk=3)
category = Category.objects.get(pk=2)
post.category.add(category)

post = Post.objects.get(pk=3)
category = Category.objects.get(pk=3)
post.category.add(category)

6) Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий)

com1 = Comment.objects.create(user_id=5, self=1, content_com='Тепло :)')
com2 = Comment.objects.create(user_id=4, self=1, content_com='Ага :)')
com3 = Comment.objects.create(user_id=4, self=2, content_com='Короли седьмой игры!!!')
com4 = Comment.objects.create(user_id=4, self=3, content_com='Скукотища')

7) Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

Post.objects.get(pk=1).like()
Post.objects.get(pk=1).like()
Post.objects.get(pk=1).like()
Post.objects.get(pk=2).like()
Post.objects.get(pk=2).like()
Post.objects.get(pk=3).dislike()
Post.objects.get(pk=3).dislike()
Post.objects.get(pk=3).dislike()
Post.objects.get(pk=3).dislike()

Comment.objects.get(pk=1).like()
Comment.objects.get(pk=3).dislike()
Comment.objects.get(pk=4).like()

8) Обновить рейтинги пользователей.

auth_rating = Author.objects.get(pk=4)
auth_rating.update_rating()

auth_rating = Author.objects.get(pk=5)
auth_rating.update_rating()

9) Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта)

Author.objects.order_by('-rating').values('user__username', 'rating').first()

10) Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

po= Post.objects.order_by('-rating').first()
Post.objects.order_by('-rating').values('time_in','author__user__username','header').first()
po.preview()

11) Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

best = Post.objects.order_by('-rating').first()
best
comments = Comment.objects.all().filter(self=best.id)
comments

for comment in comments:
    print(comment.time_in_com)
    print(User.objects.get(id=comment.user_id))
    print(comment.rating_com)
    print(comment.content_com)


#Cпасибо! :)

a href="{% url 'postid' %}"><i class="bi-alarm"></i><li>Новость</li></a>